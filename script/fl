#!/usr/bin/env perl
use strict;
use warnings;

use Getopt::Long;
use File::Next;
use File::Basename 'basename';

sub build_ext_filter {
    my (@ext) = @_;
    return sub {
        my $file = $_;
        my $pass = 0;
        for my $ext (@ext) {
            $pass ||= ($file =~ m/ \. ${ext} \z/ixs);
            last if $pass;
        }
        return $pass;
    }
}

sub start {
    my ($self) = @_;

    my @filters;
    my @ext;
    if ($self->{opt}{ext}) {
        for my $s (@{$self->{opt}{ext}}) {
            push @ext, split(',', $s);
        }
    }

    if (@ext) {
        push @filters, build_ext_filter(@ext);
    }

    push @filters, \&looks_like_perl if $self->{opt}{perl};

    my $o = {};

    $o->{file_filter} = sub {
        my $file = $_;
        return 0 if $File::Next::dir =~ m{\A \.git }x;
        return 1 unless @filters;

        my $pass = 0;
        for my $filter (@filters) {
            $pass ||= $filter->($_);
            last if $pass;
        }
        return $pass;
    };


    my $iter = File::Next::files( $o, $self->{args}[0] // '.' );
    while ( defined ( my $file = $iter->() ) ) {
        print $file, "\n";
    }
}

sub MAIN {
    my (%opt);

    GetOptions(
        \%opt,
        "perl",
        "ext=s@",
    );

    (bless { opt => \%opt, args => [@ARGV] }, __PACKAGE__)->start();
}
MAIN(@ARGV);

sub looks_like_perl {
    my ($file) = @_;
    return 1 if $file =~ / \.(?: t|p[ml]|pod|comp|psgi ) $/xi;
    return 0 if basename($file) =~ / \. /xi;

    if (open my $fh, '<', $file) {
        read($fh, my $front, 256);
        return 1 if $front && $front =~ m{^#!.*perl};
    }

    return 0;
}
