#!/usr/bin/env perl
use strict;
use warnings;

use Getopt::Long;
use File::Basename 'basename';

use MCE::Loop;
use Fcntl ':mode';

my %EXCLUDES = ( '.git' => 1, 'node_modules' => 1 );

# rg --type-list
use constant FILE_TYPE_TO_REGEX => {
    'docker' => qr/\*Dockerfile\*/u,
    'cabal' => qr/.*\.(?:cabal)/u,
    'webidl' => qr/.*\.(?:idl|webidl|widl)/u,
    'creole' => qr/.*\.(?:creole)/u,
    'd' => qr/.*\.(?:d)/u,
    'java' => qr/.*\.(?:java)/u,
    'gn' => qr/.*\.(?:gn|gni)/u,
    'purs' => qr/.*\.(?:purs)/u,
    'cmake' => qr/(?: CMakeLists\.txt | .*\.cmake )/x,
    'asciidoc' => qr/.* \. (?: adoc|asc|asciidoc ) /ux,
    'elixir' => qr/.*\.(?:eex|ex|exs)/u,
    'vhdl' => qr/.*\.(?:vhd|vhdl)/u,
    'pod' => qr/.*\.(?:pod)/u,
    'sass' => qr/.*\.(?:sass|scss)/u,
    'xml' => qr/.*\.(?:xml|xml.dist)/u,
    'markdown' => qr/.* \. (?: markdown|md|mdown|mkdn) /ux,
    'erlang' => qr/.*\.(?:erl|hrl)/u,
    'textile' => qr/.*\.(?:textile)/u,
    'm4' => qr/.*\.(?:ac|m4)/u,
    'sh' => qr/(?:
        .*\. (?: bash | bashrc | csh | cshrc | ksh | kshrc | sh | tcsh | zsh )
        | \.bash_login
        | \.bash_logout
        | \.bash_profile
        | \.bashrc
        | \.cshrc
        | \.kshrc
        | \.login
        | \.logout
        | \.profile
        | \.tcshrc
        | \.zlogin
        | \.zlogout
        | \.zprofile
        | \.zshenv
        | \.zshrc
        | bash_login
        | bash_logout
        | bash_profile
        | bashrc
        | profile
        | zlogin
        | zlogout
        | zprofile
        | zshenv
        | zshrc
    )/x,
    'jsonl' => qr/.*\.(?:jsonl)/u,
    'ceylon' => qr/.*\.(?:ceylon)/u,
    'vimscript' => qr/.*\.(?:vim)/u,
    'cpp' => qr/.*\.(?:C|H|cc|cpp|cxx|h|hh|hpp|hxx|inl)/u,
    'csharp' => qr/.*\.(?:cs)/u,
    'ml' => qr/.*\.(?:ml)/u,
    'fish' => qr/.*\.(?:fish)/u,
    'coffeescript' => qr/.*\.(?:coffee)/u,
    'ts' => qr/.*\.(ts|tsx)/,
    'crystal' => qr/(?: Projectfile| .*\.cr)/x,
    'awk' => qr/.* \.awk /ux,
    'css' => qr/.* \.(?: css|scss) /ux,
    'smarty' => qr/.*\.(?:tpl)/u,
    'vala' => qr/.*\.(?:vala)/u,
    'elisp' => qr/.*\.(?:el)/u,
    'h' => qr/.*\.(?:h|hpp)/u,
    'rust' => qr/.*\.(?:rs)/u,
    'less' => qr/.*\.(?:less)/u,
    'taskpaper' => qr/.*\.(?:taskpaper)/u,
    'systemd' => qr/.*\.(?:automount|conf|device|link|mount|path|scope|service|slice|socket|swap|target|timer)/u,
    'json' => qr/(?: composer\.lock | .*\.json )/x,
    'jinja' => qr/.*\.(?:j2|jinja|jinja2)/u,
    'html' => qr/.*\.(?:ejs|htm|html)/u,
    'vim' => qr/.* \. vim /ux,
    'fortran' => qr/.*\.(?:F|F77|F90|F95|f|f77|f90|f95|pfo)/u,
    'msbuild' => qr/.*\.(?:csproj|fsproj|proj|props|targets|vcxproj)/u,
    'hbs' => qr/.*\.(?:hbs)/u,
    'nim' => qr/.*\.(?:nim)/u,
    'yacc' => qr/.*\.(?:y)/u,
    'wiki' => qr/.*\.(?:mediawiki|wiki)/u,
    'jl' => qr/.*\.(?:jl)/u,
    'gzip' => qr/.*\.(?:gz)/u,
    'jupyter' => qr/.* \. (?: ipynb|jpynb ) /ux,
    'rdoc' => qr/.*\.(?:rdoc)/u,
    'go' => qr/.*\.(?:go)/u,
    'log' => qr/.*\.(?:log)/u,
    'ps' => qr/.*\.(?:cdxml|ps1|ps1xml|psd1|psm1)/u,
    'ruby' => qr/ Gemfile | Rakefile | .* \. (?: gemspec|rb|irbrc ) /ux,
    'toml' => qr/ Cargo\.lock | .*\.toml /x,
    'spark' => qr/.*\.(?:spark)/u,
    'cs' => qr/.*\.(?:cs)/u,
    'org' => qr/.*\.(?:org)/u,
    'elm' => qr/.*\.(?:elm)/u,
    'vb' => qr/.*\.(?:vb)/u,
    'sv' => qr/.*\.(?:h|sv|svh|v|vg)/u,
    'lua' => qr/.*\.(?:lua)/u,
    'stylus' => qr/.* \. styl /ux,
    'js' => qr/.*\.(?:js|jsx|vue)/u,
    'scala' => qr/.*\.(?:scala)/u,
    'cshtml' => qr/.*\.(?:cshtml)/u,
    'protobuf' => qr/.*\.(?:proto)/u,
    'qmake' => qr/.* \.(?: prf|pri|pro) /ux,
    'kotlin' => qr/.*\.(?:kt|kts)/u,
    'ocaml' => qr/.*\.(?:ml|mli|mll|mly)/u,
    'license' => [
        '*[.-]LICEN[CS]E*',
        'AGPL-*[0-9]*',
        'APACHE-*[0-9]*',
        'BSD-*[0-9]*',
        'CC-BY-*',
        'COPYING',
        'COPYING[.-]*',
        'COPYRIGHT',
        'COPYRIGHT[.-]*',
        'EULA',
        'EULA[.-]*',
        'GFDL-*[0-9]*',
        'GNU-*[0-9]*',
        'GPL-*[0-9]*',
        'LGPL-*[0-9]*',
        'LICEN[CS]E',
        'LICEN[CS]E[.-]*',
        'MIT-*[0-9]*',
        'MPL-*[0-9]*',
        'NOTICE',
        'NOTICE[.-]*',
        'OFL-*[0-9]*',
        'PATENTS',
        'PATENTS[.-]*',
        'UNLICEN[CS]E',
        'UNLICEN[CS]E[.-]*',
        'agpl[.-]*',
        'gpl[.-]*',
        'lgpl[.-]*',
        'licen[cs]e',
        'licen[cs]e.*'
    ],
    'rst' => qr/.*\.(?:rst)/u,
    'nix' => qr/.* \. nix/ux,
    'sql' => qr/.*\.(?:psql|sql)/u,
    'sml' => qr/.*\.(?:sig|sml)/u,
    'cython' => qr/.*\.(?:pyx)/u,
    'objc' => qr/.*\.(?:h|m)/u,
    'lzma' => qr/.*\.(?:lzma)/u,
    'agda' => qr/.*\.(?:agda|lagda)/u,
    'svg' => qr/.*\.(?:svg)/u,
    'swig' => qr/.*\.(?:def|i)/u,
    'md' => qr/.*\.(?:markdown|md|mdown|mkdn)/u,
    'objcpp' => qr/.*\.(?:h|mm)/u,
    'cbor' => qr/.*\.(?:cbor)/u,
    'tcl' => qr/.*\.(?:tcl)/u,
    'twig' => qr/.*\.(?:twig)/u,
    'csv' => qr/.*\.(?:csv)/u,
    'fsharp' => qr/.*\.(?:fs|fsi|fsx)/u,
    'perl' => qr/.*\.(?:PL|perl|pl|plh|plx|pm|t)/u,
    'py' => qr/.*\.(?:py)/u,
    'r' => qr/.*\.(?:R|Rmd|Rnw|r)/u,
    'tex' => qr/.*\.(?:bib|cls|ltx|sty|tex)/u,
    'txt' => qr/.*\.(?:txt)/u,
    'mk' => qr/mkfile/u,
    'xz' => qr/.*\.(?:xz)/u,
    'clojure' => qr/.*\.(?:clj|cljc|cljs|cljx)/u,
    'c' => qr/.*\.(?:H|c|h)/u,
    'dart' => qr/.*\.(?:dart)/u,
    'asm' => qr/.*\.(?:S|asm|s)/u,
    'tf' => qr/.*\.(?:tf)/u,
    'php' => qr/.*\.(?:php|php3|php4|php5|phtml)/u,
    'pdf' => qr/.*\.(?:pdf)/u,
    'make' => qr/(?: GNUmakefile | Gnumakefile | Makefile | gnumakefile | makefile | .*\. (mak|mk) )/x,
    'matlab' => qr/.*\.(?:m)/u,
    'bzip2' => qr/.*\.(?:bz2)/u,
    'groovy' => qr/.*\.(?:gradle|groovy)/u,
    'readme' => qr/(?: .*README | README.* )/x,
    'soy' => qr/.*\.(?:soy)/u,
    'julia' => qr/.*\.(?:jl)/u,
    'haskell' => qr/.*\.(?:hs|lhs)/u,
    'avro' => qr/.*\.(?:avdl|avpr|avsc)/u,
    'swift' => qr/.*\.(?:swift)/u,
    'bitbake' => qr/.*\.(?:bb|bbappend|bbclass|conf|inc)/u,
    'yaml' => qr/.*\.(?:yaml|yml)/u,
    'zsh' => qr/(?: \.? (?: zlogin|zlogout|zprofile|zshenv|zshrc) | .*\.zsh )/ux,
    'config' => qr/.*\.(?:cfg|conf|config|ini)/u,
    'lisp' => qr/.*\.(?:el|jl|lisp|lsp|sc|scm)/u,
    'man' => qr/.*\.(?:[0-9][cEFMmpSx]|[0-9lnpx])/u
};

sub looks_like_perl {
    my ($file) = @_;
    return 1 if $file =~ / \.(?: t|p[ml]|pod|comp|psgi ) $/xi;
    return 0 if basename($file) =~ / \. /xi;
    if (open my $fh, '<', $file) {
        read($fh, my $front, 256);
        return 1 if $front && $front =~ m{^#!.*perl};
    }
    return 0;
}

sub build_ext_filter {
    my (@ext) = @_;
    return sub {
        my $file = $_;
        my $pass = 0;
        for my $ext (@ext) {
            $pass ||= ($file =~ m/ \. ${ext} \z/ixs);
            last if $pass;
        }
        return $pass;
    }
}

sub onedir {
    my ($x, $cb) = @_;
    my @st;
    return () unless opendir(my $dh, $x);
    while (readdir($dh)) {
        next if ($_ eq '.' || $_ eq '..');
        my $it = $x . "/" . $_;

        my $mode = (stat($it))[2] or next;
        if (S_ISREG($mode)) {
            $cb->($it);
        } elsif (S_ISDIR($mode) && (! $EXCLUDES{$_}) ) {
            push @st, $it;
        }
    }
    closedir($dh);
    return @st;
}

sub iter_files {
    my ($start, $cb) = @_;
    MCE::Loop::init { chunk_size => 1 };

    my @st = onedir($start, $cb);
    while(@st && @st < 5) {
        my $x = shift(@st);
        push @st, onedir($x, $cb);
    }
    if (@st) {
        mce_loop {
            my @s = onedir($_, $cb);
            while(@s) {
                my $x = shift(@s);
                push @s, onedir($x, $cb);
            }
        } @st;
    }
}

sub start {
    my ($self) = @_;

    my @filters;
    my @ext;
    if ($self->{opt}{ext}) {
        for my $s (@{$self->{opt}{ext}}) {
            push @ext, split(',', $s);
        }
    }

    if (@ext) {
        push @filters, build_ext_filter(@ext);
    }

    push @filters, \&looks_like_perl if $self->{opt}{perl};

    if (defined($self->{opt}{type})) {
        if (my $regex = FILE_TYPE_TO_REGEX->{ $self->{opt}{type} }) {
            push @filters, sub {
                my ($path) = @_;
                my ($file) = $path =~ m{/([^/]+)\z};
                return 1 if $file =~ m{^(?:$regex)\z}o;
                return 0;
            };
        } else {
            die 'Unknown type: ' . $self->{opt}{type} . "\n";
        }
    }

    if (@filters) {
        my $filter = sub {
            my $file = $_[0];
            my $pass = 0;
            for my $filter (@filters) {
                $pass ||= $filter->($file);
                last if $pass;
            }
            return $pass;
        };

        iter_files(
            ($self->{args}[0] // '.'),
            sub {
                return unless $filter->($_[0]);
                MCE->say( $_[0] )
            }
        );
    } else {
        iter_files(
            ($self->{args}[0] // '.'),
            sub { MCE->say( $_[0] ) }
        );
    }
}

sub MAIN {
    my (%opt);

    GetOptions(
        \%opt,
        "perl",
        "ext=s@",
        "type|t=s",
    );

    (bless { opt => \%opt, args => [@ARGV] }, __PACKAGE__)->start();
}
MAIN(@ARGV);
